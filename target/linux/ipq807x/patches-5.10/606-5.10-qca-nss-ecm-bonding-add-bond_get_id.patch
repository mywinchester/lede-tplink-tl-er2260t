
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -203,6 +203,9 @@ atomic_t netpoll_block_tx = ATOMIC_INIT(
 
 unsigned int bond_net_id __read_mostly;
 
+/* QCA NSS bonding support */
+static unsigned long bond_id_mask = 0xFFFFFFF0;
+
 static const struct flow_dissector_key flow_keys_bonding_keys[] = {
 	{
 		.key_id = FLOW_DISSECTOR_KEY_CONTROL,
@@ -3891,6 +3894,23 @@ static int bond_get_lowest_level_rcu(str
 }
 #endif
 
+/* QCA NSS bonding support */
+int bond_get_id(struct net_device *bond_dev)
+{
+    struct bonding *bond;
+    int bond_id = 0;
+
+    if (!((bond_dev->priv_flags & IFF_BONDING) &&
+          (bond_dev->flags & IFF_MASTER)))
+        return -EINVAL;
+
+    bond = netdev_priv(bond_dev);
+    bond_id = bond->id;
+
+    return bond_id;
+}
+EXPORT_SYMBOL(bond_get_id);
+
 static void bond_get_stats(struct net_device *bond_dev,
 			   struct rtnl_link_stats64 *stats)
 {
@@ -4865,6 +4885,10 @@ static void bond_destructor(struct net_d
 	struct bonding *bond = netdev_priv(bond_dev);
 	if (bond->wq)
 		destroy_workqueue(bond->wq);
+
+    /* QCA NSS bonding support */
+    if (bond->id != (~0U))
+        clear_bit(bond->id, &bond_id_mask);
 }
 
 void bond_setup(struct net_device *bond_dev)
@@ -5434,6 +5458,13 @@ int bond_create(struct net *net, const c
 
 	bond_work_init_all(bond);
 
+	/* QCA NSS bonding support */
+	bond->id = ~0U;
+	if (bond_id_mask != (~0UL)) {
+		bond->id = (u32)ffz(bond_id_mask);
+		set_bit(bond->id, &bond_id_mask);    
+	}
+
 	rtnl_unlock();
 	return 0;
 }

--- a/include/net/bonding.h
+++ b/include/net/bonding.h
@@ -257,6 +257,7 @@ struct bonding {
 	/* protecting ipsec_list */
 	spinlock_t ipsec_lock;
 #endif /* CONFIG_XFRM_OFFLOAD */
+	u32    id; /* QCA NSS bonding */
 };
 
 #define bond_slave_get_rcu(dev) \
@@ -629,6 +630,7 @@ struct bond_net {
 
 int bond_arp_rcv(const struct sk_buff *skb, struct bonding *bond, struct slave *slave);
 netdev_tx_t bond_dev_queue_xmit(struct bonding *bond, struct sk_buff *skb, struct net_device *slave_dev);
+int bond_get_id(struct net_device *bond_dev); /* QCA NSS bonding support */
 int bond_create(struct net *net, const char *name);
 int bond_create_sysfs(struct bond_net *net);
 void bond_destroy_sysfs(struct bond_net *net);
